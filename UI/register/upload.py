# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'upload.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.
import numpy as np
from tensorflow import keras
from tensorflow.keras.preprocessing import image
from tensorflow.keras.applications.vgg16 import preprocess_input
import cv2 as cv
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QGraphicsScene, QGraphicsPixmapItem
from PyQt5.QtGui import QImage, QPixmap
from PyQt5.QtWidgets import QMessageBox

from open_chrome import Chrome
from config import img_width, img_height
# import background


class Upload_Ui(QtWidgets.QMainWindow):
    def __init__(self, patient):
        super(Upload_Ui, self).__init__()
        self.patient = patient
        self.setupUi(self)

    def setupUi(self, MainWindow):
        self.mainwindow = MainWindow
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(793, 736)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(MainWindow.sizePolicy().hasHeightForWidth())
        MainWindow.setSizePolicy(sizePolicy)
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap(r"G:\code\pycharm\cancer_detection\UI\配图\7.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        MainWindow.setWindowIcon(icon)
        MainWindow.setStyleSheet("background-image: url(:/background/bg1.jpeg);")
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.verticalLayout = QtWidgets.QVBoxLayout(self.centralwidget)
        self.verticalLayout.setObjectName("verticalLayout")
        self.label_2 = QtWidgets.QLabel(self.centralwidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Maximum, QtWidgets.QSizePolicy.Maximum)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_2.sizePolicy().hasHeightForWidth())
        self.label_2.setSizePolicy(sizePolicy)
        palette = QtGui.QPalette()
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.WindowText, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.WindowText, brush)
        brush = QtGui.QBrush(QtGui.QColor(120, 120, 120))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.WindowText, brush)
        self.label_2.setPalette(palette)
        font = QtGui.QFont()
        font.setFamily("Arial Black")
        font.setPointSize(6)
        font.setBold(True)
        font.setWeight(75)
        self.label_2.setFont(font)
        self.label_2.setObjectName("label_2")
        self.verticalLayout.addWidget(self.label_2)
        self.horizontalLayout_2 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_2.setObjectName("horizontalLayout_2")
        self.label = QtWidgets.QLabel(self.centralwidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Maximum, QtWidgets.QSizePolicy.Maximum)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label.sizePolicy().hasHeightForWidth())
        self.label.setSizePolicy(sizePolicy)
        self.label.setText("")
        self.label.setPixmap(QtGui.QPixmap(r"G:\code\pycharm\cancer_detection\UI\配图\21.png"))
        self.label.setObjectName("label")
        self.horizontalLayout_2.addWidget(self.label)
        self.label_3 = QtWidgets.QLabel(self.centralwidget)
        palette = QtGui.QPalette()
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.WindowText, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.WindowText, brush)
        brush = QtGui.QBrush(QtGui.QColor(120, 120, 120))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.WindowText, brush)
        self.label_3.setPalette(palette)
        font = QtGui.QFont()
        font.setFamily("Perpetua Titling MT")
        font.setPointSize(8)
        font.setBold(True)
        font.setWeight(75)
        self.label_3.setFont(font)
        self.label_3.setObjectName("label_3")
        self.horizontalLayout_2.addWidget(self.label_3)
        self.horizontalLayout_2.setStretch(1, 5)
        self.verticalLayout.addLayout(self.horizontalLayout_2)

        self.image_view = QtWidgets.QGraphicsView(self.centralwidget)
        self.image_view.setObjectName("image_view")

        self.zoomscale = 1
        self.item = None
        self.scene = QGraphicsScene()


        self.verticalLayout.addWidget(self.image_view)
        self.horizontalLayout = QtWidgets.QHBoxLayout()
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.upload_button = QtWidgets.QPushButton(self.centralwidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Maximum, QtWidgets.QSizePolicy.Maximum)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.upload_button.sizePolicy().hasHeightForWidth())
        self.upload_button.setSizePolicy(sizePolicy)
        palette = QtGui.QPalette()
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.ButtonText, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.ButtonText, brush)
        brush = QtGui.QBrush(QtGui.QColor(120, 120, 120))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.ButtonText, brush)
        self.upload_button.setPalette(palette)
        font = QtGui.QFont()
        font.setFamily("Bahnschrift SemiBold")
        font.setBold(True)
        font.setWeight(75)
        self.upload_button.setFont(font)
        self.upload_button.setObjectName("upload_button")
        self.horizontalLayout.addWidget(self.upload_button)
        self.chatbot_button = QtWidgets.QPushButton(self.centralwidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Maximum, QtWidgets.QSizePolicy.Maximum)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.chatbot_button.sizePolicy().hasHeightForWidth())
        self.chatbot_button.setSizePolicy(sizePolicy)
        palette = QtGui.QPalette()
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.ButtonText, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.ButtonText, brush)
        brush = QtGui.QBrush(QtGui.QColor(120, 120, 120))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.ButtonText, brush)
        self.chatbot_button.setPalette(palette)
        font = QtGui.QFont()
        font.setFamily("Bahnschrift SemiBold")
        font.setBold(True)
        font.setWeight(75)
        self.chatbot_button.setFont(font)
        self.chatbot_button.setObjectName("chatbot_button")
        self.horizontalLayout.addWidget(self.chatbot_button)
        self.verticalLayout.addLayout(self.horizontalLayout)
        self.verticalLayout.setStretch(0, 1)
        self.verticalLayout.setStretch(1, 1)
        self.verticalLayout.setStretch(2, 20)
        self.verticalLayout.setStretch(3, 4)
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 793, 26))
        self.menubar.setObjectName("menubar")
        self.menuDocuments = QtWidgets.QMenu(self.menubar)
        self.menuDocuments.setObjectName("menuDocuments")
        self.menuTest = QtWidgets.QMenu(self.menubar)
        self.menuTest.setObjectName("menuTest")
        self.menuMore_Inform = QtWidgets.QMenu(self.menubar)
        self.menuMore_Inform.setObjectName("menuMore_Inform")
        MainWindow.setMenuBar(self.menubar)
        self.toolBar = QtWidgets.QToolBar(MainWindow)
        self.toolBar.setObjectName("toolBar")
        MainWindow.addToolBar(QtCore.Qt.TopToolBarArea, self.toolBar)


        self.upload_act = QtWidgets.QAction(MainWindow)
        icon1 = QtGui.QIcon()
        icon1.addPixmap(QtGui.QPixmap(r"G:\code\pycharm\cancer_detection\UI\配图\17.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.upload_act.setIcon(icon1)
        self.upload_act.setObjectName("upload_act")

        self.information_act = QtWidgets.QAction(MainWindow)
        icon2 = QtGui.QIcon()
        icon2.addPixmap(QtGui.QPixmap(r"G:\code\pycharm\cancer_detection\UI\配图\22.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.information_act.setIcon(icon2)
        self.information_act.setObjectName("information_act")

        self.back_act = QtWidgets.QAction(MainWindow)
        icon3 = QtGui.QIcon()
        icon3.addPixmap(QtGui.QPixmap(r"G:\code\pycharm\cancer_detection\UI\配图\20.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.back_act.setIcon(icon3)
        self.back_act.setObjectName("back_act")

        self.history_act = QtWidgets.QAction(MainWindow)
        icon4 = QtGui.QIcon()
        icon4.addPixmap(QtGui.QPixmap(r"G:\code\pycharm\cancer_detection\UI\配图\14.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.history_act.setIcon(icon4)
        self.history_act.setObjectName("history_act")

        self.zoomin_act = QtWidgets.QAction(MainWindow)
        icon5 = QtGui.QIcon()
        icon5.addPixmap(QtGui.QPixmap(r"G:\code\pycharm\cancer_detection\UI\配图\zoomin.png"), QtGui.QIcon.Normal,QtGui.QIcon.Off)
        self.zoomin_act.setIcon(icon5)
        self.zoomin_act.setObjectName("zoomin_act")

        self.zoomout_act = QtWidgets.QAction(MainWindow)
        icon6 = QtGui.QIcon()
        icon6.addPixmap(QtGui.QPixmap(r"G:\code\pycharm\cancer_detection\UI\配图\zoomout.png"), QtGui.QIcon.Normal,QtGui.QIcon.Off)
        self.zoomout_act.setIcon(icon6)
        self.zoomout_act.setObjectName("zoomout_act")

        self.menuDocuments.addAction(self.history_act)
        self.menuTest.addAction(self.upload_act)
        self.menuTest.addAction(self.zoomin_act)
        self.menuTest.addAction(self.zoomout_act)
        self.menuMore_Inform.addAction(self.information_act)
        self.menuMore_Inform.addAction(self.back_act)
        self.menubar.addAction(self.menuDocuments.menuAction())
        self.menubar.addAction(self.menuTest.menuAction())
        self.menubar.addAction(self.menuMore_Inform.menuAction())
        self.toolBar.addAction(self.history_act)
        self.toolBar.addAction(self.upload_act)
        self.toolBar.addAction(self.information_act)
        self.toolBar.addAction(self.back_act)
        self.toolBar.addAction(self.zoomin_act)
        self.toolBar.addAction(self.zoomout_act)

        self.retranslateUi(MainWindow)
        self.upload_act.triggered.connect(self.upload_image)
        self.upload_button.clicked.connect(self.upload_image)
        self.zoomin_act.triggered.connect(self.on_zoomin_clicked)
        self.zoomout_act.triggered.connect(self.on_zoomout_clicked)
        self.history_act.triggered.connect(self.show_history)
        self.back_act.triggered.connect(self.back_to_register)
        self.information_act.triggered.connect(self.open_chrome)

        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def upload_image(self):
        file_path = QtWidgets.QFileDialog.getOpenFileName(self, 'Open Image File')[0]
        self.patient.image_path = file_path

        img = cv.imread(file_path)
        img = cv.cvtColor(img, cv.COLOR_BGR2RGB)
        x = img.shape[1]
        y = img.shape[0]
        frame = QImage(img, x, y, QImage.Format_RGB888)
        pix = QPixmap.fromImage(frame)
        self.item = QGraphicsPixmapItem(pix)
        self.scene.addItem(self.item)
        self.image_view.setScene(self.scene)
        self.patient.image = img
        QMessageBox.information(self.mainwindow, 'Tip', 'You image has been uploaded successfully! Please wait a minute for us to calculate the result.')
        self.image_diagnose()

    def image_diagnose(self):
        model = keras.models.load_model("G:\code\pycharm\cancer_detection\VGG_model")
        img = image.load_img(self.patient.image_path, target_size=(img_width, img_height))
        x = image.img_to_array(img)
        x = np.expand_dims(x, axis=0)
        x = preprocess_input(x)
        label = 1 if model.predict(x)[0][0] >= 0.5 else 0
        confidence = model.predict(x)[0][0] if model.predict(x)[0][0] >= 0.5 else 1 - model.predict(x)[0][0]
        print('label:{}\nconfidence:{}'.format(label, confidence))
        cancer_type = 'benign' if label == 0 else 'malignant'
        self.patient.diagnose_result = 'After our diagnosis, the probability that the tumor is {} is {}%'.format(cancer_type, round(confidence*100, 2))
        self.patient.update_patient_diagnose()
        QMessageBox.information(self.mainwindow, 'Tip', 'The result has been saved, you can ask the robot about it.')

    def show_history(self):
        self.patient.show_all_patients_information()

    def on_zoomout_clicked(self):
        self.zoomscale = self.zoomscale - 0.3
        if self.zoomscale <= 0:
            self.zoomscale = 0.2
        self.item.setScale(self.zoomscale)  # 缩小图像

    def on_zoomin_clicked(self):
        self.zoomscale = self.zoomscale + 0.3
        if self.zoomscale >= 10:
            self.zoomscale = 1.2
        self.item.setScale(self.zoomscale)

    def open_chrome(self):
        chrome = Chrome()
        chrome.open_page()

    def back_to_register(self):
        # self.image_view = QtWidgets.QGraphicsView(self.centralwidget)
        # self.image_view.setObjectName("image_view")
        self.mainwindow.close()

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "Upload Image"))
        self.label_2.setText(_translate("MainWindow", "© PAST7009 TEAM 2"))
        self.label_3.setText(_translate("MainWindow", "Your Diagnose Assistant "))
        self.upload_button.setText(_translate("MainWindow", "Upload Your CT Image"))
        self.chatbot_button.setText(_translate("MainWindow", "Talk to●ˍ● NLP Robot"))
        self.menuDocuments.setTitle(_translate("MainWindow", "Documents"))
        self.menuTest.setTitle(_translate("MainWindow", "Diagnose"))
        self.menuMore_Inform.setTitle(_translate("MainWindow", "About"))
        self.toolBar.setWindowTitle(_translate("MainWindow", "toolBar"))
        self.upload_act.setText(_translate("MainWindow", "Upload Image"))
        self.information_act.setText(_translate("MainWindow", "More Inform."))
        self.back_act.setText(_translate("MainWindow", "Back to Register"))
        self.history_act.setText(_translate("MainWindow", "History"))
        self.zoomin_act.setText(_translate("MainWindow", "Zoom in"))
        self.zoomout_act.setText(_translate("MainWindow", "Zoom out"))
